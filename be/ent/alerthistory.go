// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/echoturing/alert/ent/alerthistory"
	"github.com/echoturing/alert/ent/schema/sub"
	"github.com/facebook/ent/dialect/sql"
)

// AlertHistory is the model entity for the AlertHistory schema.
type AlertHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// AlertID holds the value of the "alert_id" field.
	AlertID int64 `json:"alert_id,omitempty"`
	// AlertName holds the value of the "alert_name" field.
	AlertName string `json:"alert_name,omitempty"`
	// Detail holds the value of the "detail" field.
	Detail sub.AlertHistoryDetail `json:"detail,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AlertHistory) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},          // id
		&sql.NullInt64{},          // alert_id
		&sql.NullString{},         // alert_name
		&sub.AlertHistoryDetail{}, // detail
		&sql.NullTime{},           // createdAt
		&sql.NullTime{},           // updatedAt
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AlertHistory fields.
func (ah *AlertHistory) assignValues(values ...interface{}) error {
	if m, n := len(values), len(alerthistory.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ah.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field alert_id", values[0])
	} else if value.Valid {
		ah.AlertID = value.Int64
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field alert_name", values[1])
	} else if value.Valid {
		ah.AlertName = value.String
	}
	if value, ok := values[2].(*sub.AlertHistoryDetail); !ok {
		return fmt.Errorf("unexpected type %T for field detail", values[2])
	} else if value != nil {
		ah.Detail = *value
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[3])
	} else if value.Valid {
		ah.CreatedAt = value.Time
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[4])
	} else if value.Valid {
		ah.UpdatedAt = value.Time
	}
	return nil
}

// Update returns a builder for updating this AlertHistory.
// Note that, you need to call AlertHistory.Unwrap() before calling this method, if this AlertHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (ah *AlertHistory) Update() *AlertHistoryUpdateOne {
	return (&AlertHistoryClient{config: ah.config}).UpdateOne(ah)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ah *AlertHistory) Unwrap() *AlertHistory {
	tx, ok := ah.config.driver.(*txDriver)
	if !ok {
		panic("ent: AlertHistory is not a transactional entity")
	}
	ah.config.driver = tx.drv
	return ah
}

// String implements the fmt.Stringer.
func (ah *AlertHistory) String() string {
	var builder strings.Builder
	builder.WriteString("AlertHistory(")
	builder.WriteString(fmt.Sprintf("id=%v", ah.ID))
	builder.WriteString(", alert_id=")
	builder.WriteString(fmt.Sprintf("%v", ah.AlertID))
	builder.WriteString(", alert_name=")
	builder.WriteString(ah.AlertName)
	builder.WriteString(", detail=")
	builder.WriteString(fmt.Sprintf("%v", ah.Detail))
	builder.WriteString(", createdAt=")
	builder.WriteString(ah.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(ah.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AlertHistories is a parsable slice of AlertHistory.
type AlertHistories []*AlertHistory

func (ah AlertHistories) config(cfg config) {
	for _i := range ah {
		ah[_i].config = cfg
	}
}
