// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/echoturing/alert/ent/alert"
	"github.com/echoturing/alert/ent/schema"
	"github.com/facebook/ent/dialect/sql"
)

// Alert is the model entity for the Alert schema.
type Alert struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Channels holds the value of the "channels" field.
	Channels schema.ChannelIDS `json:"channels,omitempty"`
	// Rule holds the value of the "rule" field.
	Rule schema.Rule `json:"rule,omitempty"`
	// Status holds the value of the "status" field.
	Status schema.AlertStatus `json:"status,omitempty"`
	// State holds the value of the "state" field.
	State schema.AlertState `json:"state,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Alert) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},     // id
		&sql.NullString{},    // name
		&schema.ChannelIDS{}, // channels
		&schema.Rule{},       // rule
		&sql.NullInt64{},     // status
		&sql.NullInt64{},     // state
		&sql.NullTime{},      // createdAt
		&sql.NullTime{},      // updatedAt
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Alert fields.
func (a *Alert) assignValues(values ...interface{}) error {
	if m, n := len(values), len(alert.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	a.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		a.Name = value.String
	}
	if value, ok := values[1].(*schema.ChannelIDS); !ok {
		return fmt.Errorf("unexpected type %T for field channels", values[1])
	} else if value != nil {
		a.Channels = *value
	}
	if value, ok := values[2].(*schema.Rule); !ok {
		return fmt.Errorf("unexpected type %T for field rule", values[2])
	} else if value != nil {
		a.Rule = *value
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[3])
	} else if value.Valid {
		a.Status = schema.AlertStatus(value.Int64)
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field state", values[4])
	} else if value.Valid {
		a.State = schema.AlertState(value.Int64)
	}
	if value, ok := values[5].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field createdAt", values[5])
	} else if value.Valid {
		a.CreatedAt = value.Time
	}
	if value, ok := values[6].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updatedAt", values[6])
	} else if value.Valid {
		a.UpdatedAt = value.Time
	}
	return nil
}

// Update returns a builder for updating this Alert.
// Note that, you need to call Alert.Unwrap() before calling this method, if this Alert
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Alert) Update() *AlertUpdateOne {
	return (&AlertClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (a *Alert) Unwrap() *Alert {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Alert is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Alert) String() string {
	var builder strings.Builder
	builder.WriteString("Alert(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", name=")
	builder.WriteString(a.Name)
	builder.WriteString(", channels=")
	builder.WriteString(fmt.Sprintf("%v", a.Channels))
	builder.WriteString(", rule=")
	builder.WriteString(fmt.Sprintf("%v", a.Rule))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", a.Status))
	builder.WriteString(", state=")
	builder.WriteString(fmt.Sprintf("%v", a.State))
	builder.WriteString(", createdAt=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updatedAt=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Alerts is a parsable slice of Alert.
type Alerts []*Alert

func (a Alerts) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
