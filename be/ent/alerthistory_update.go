// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/echoturing/alert/ent/alerthistory"
	"github.com/echoturing/alert/ent/predicate"
	"github.com/echoturing/alert/ent/schema/sub"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// AlertHistoryUpdate is the builder for updating AlertHistory entities.
type AlertHistoryUpdate struct {
	config
	hooks      []Hook
	mutation   *AlertHistoryMutation
	predicates []predicate.AlertHistory
}

// Where adds a new predicate for the builder.
func (ahu *AlertHistoryUpdate) Where(ps ...predicate.AlertHistory) *AlertHistoryUpdate {
	ahu.predicates = append(ahu.predicates, ps...)
	return ahu
}

// SetAlertID sets the alert_id field.
func (ahu *AlertHistoryUpdate) SetAlertID(i int64) *AlertHistoryUpdate {
	ahu.mutation.ResetAlertID()
	ahu.mutation.SetAlertID(i)
	return ahu
}

// AddAlertID adds i to alert_id.
func (ahu *AlertHistoryUpdate) AddAlertID(i int64) *AlertHistoryUpdate {
	ahu.mutation.AddAlertID(i)
	return ahu
}

// SetAlertName sets the alert_name field.
func (ahu *AlertHistoryUpdate) SetAlertName(s string) *AlertHistoryUpdate {
	ahu.mutation.SetAlertName(s)
	return ahu
}

// SetDetail sets the detail field.
func (ahu *AlertHistoryUpdate) SetDetail(shd sub.AlertHistoryDetail) *AlertHistoryUpdate {
	ahu.mutation.SetDetail(shd)
	return ahu
}

// SetUpdatedAt sets the updatedAt field.
func (ahu *AlertHistoryUpdate) SetUpdatedAt(t time.Time) *AlertHistoryUpdate {
	ahu.mutation.SetUpdatedAt(t)
	return ahu
}

// Mutation returns the AlertHistoryMutation object of the builder.
func (ahu *AlertHistoryUpdate) Mutation() *AlertHistoryMutation {
	return ahu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ahu *AlertHistoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ahu.defaults()
	if len(ahu.hooks) == 0 {
		affected, err = ahu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AlertHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ahu.mutation = mutation
			affected, err = ahu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ahu.hooks) - 1; i >= 0; i-- {
			mut = ahu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ahu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ahu *AlertHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ahu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ahu *AlertHistoryUpdate) Exec(ctx context.Context) error {
	_, err := ahu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahu *AlertHistoryUpdate) ExecX(ctx context.Context) {
	if err := ahu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ahu *AlertHistoryUpdate) defaults() {
	if _, ok := ahu.mutation.UpdatedAt(); !ok {
		v := alerthistory.UpdateDefaultUpdatedAt()
		ahu.mutation.SetUpdatedAt(v)
	}
}

func (ahu *AlertHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   alerthistory.Table,
			Columns: alerthistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: alerthistory.FieldID,
			},
		},
	}
	if ps := ahu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ahu.mutation.AlertID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: alerthistory.FieldAlertID,
		})
	}
	if value, ok := ahu.mutation.AddedAlertID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: alerthistory.FieldAlertID,
		})
	}
	if value, ok := ahu.mutation.AlertName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alerthistory.FieldAlertName,
		})
	}
	if value, ok := ahu.mutation.Detail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alerthistory.FieldDetail,
		})
	}
	if ahu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: alerthistory.FieldCreatedAt,
		})
	}
	if value, ok := ahu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: alerthistory.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ahu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{alerthistory.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AlertHistoryUpdateOne is the builder for updating a single AlertHistory entity.
type AlertHistoryUpdateOne struct {
	config
	hooks    []Hook
	mutation *AlertHistoryMutation
}

// SetAlertID sets the alert_id field.
func (ahuo *AlertHistoryUpdateOne) SetAlertID(i int64) *AlertHistoryUpdateOne {
	ahuo.mutation.ResetAlertID()
	ahuo.mutation.SetAlertID(i)
	return ahuo
}

// AddAlertID adds i to alert_id.
func (ahuo *AlertHistoryUpdateOne) AddAlertID(i int64) *AlertHistoryUpdateOne {
	ahuo.mutation.AddAlertID(i)
	return ahuo
}

// SetAlertName sets the alert_name field.
func (ahuo *AlertHistoryUpdateOne) SetAlertName(s string) *AlertHistoryUpdateOne {
	ahuo.mutation.SetAlertName(s)
	return ahuo
}

// SetDetail sets the detail field.
func (ahuo *AlertHistoryUpdateOne) SetDetail(shd sub.AlertHistoryDetail) *AlertHistoryUpdateOne {
	ahuo.mutation.SetDetail(shd)
	return ahuo
}

// SetUpdatedAt sets the updatedAt field.
func (ahuo *AlertHistoryUpdateOne) SetUpdatedAt(t time.Time) *AlertHistoryUpdateOne {
	ahuo.mutation.SetUpdatedAt(t)
	return ahuo
}

// Mutation returns the AlertHistoryMutation object of the builder.
func (ahuo *AlertHistoryUpdateOne) Mutation() *AlertHistoryMutation {
	return ahuo.mutation
}

// Save executes the query and returns the updated entity.
func (ahuo *AlertHistoryUpdateOne) Save(ctx context.Context) (*AlertHistory, error) {
	var (
		err  error
		node *AlertHistory
	)
	ahuo.defaults()
	if len(ahuo.hooks) == 0 {
		node, err = ahuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AlertHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ahuo.mutation = mutation
			node, err = ahuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ahuo.hooks) - 1; i >= 0; i-- {
			mut = ahuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ahuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ahuo *AlertHistoryUpdateOne) SaveX(ctx context.Context) *AlertHistory {
	node, err := ahuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ahuo *AlertHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ahuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahuo *AlertHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := ahuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ahuo *AlertHistoryUpdateOne) defaults() {
	if _, ok := ahuo.mutation.UpdatedAt(); !ok {
		v := alerthistory.UpdateDefaultUpdatedAt()
		ahuo.mutation.SetUpdatedAt(v)
	}
}

func (ahuo *AlertHistoryUpdateOne) sqlSave(ctx context.Context) (_node *AlertHistory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   alerthistory.Table,
			Columns: alerthistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: alerthistory.FieldID,
			},
		},
	}
	id, ok := ahuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AlertHistory.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ahuo.mutation.AlertID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: alerthistory.FieldAlertID,
		})
	}
	if value, ok := ahuo.mutation.AddedAlertID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: alerthistory.FieldAlertID,
		})
	}
	if value, ok := ahuo.mutation.AlertName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alerthistory.FieldAlertName,
		})
	}
	if value, ok := ahuo.mutation.Detail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alerthistory.FieldDetail,
		})
	}
	if ahuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: alerthistory.FieldCreatedAt,
		})
	}
	if value, ok := ahuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: alerthistory.FieldUpdatedAt,
		})
	}
	_node = &AlertHistory{config: ahuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ahuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{alerthistory.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
