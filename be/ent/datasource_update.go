// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/echoturing/alert/ent/datasource"
	"github.com/echoturing/alert/ent/predicate"
	"github.com/echoturing/alert/ent/schema"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// DatasourceUpdate is the builder for updating Datasource entities.
type DatasourceUpdate struct {
	config
	hooks      []Hook
	mutation   *DatasourceMutation
	predicates []predicate.Datasource
}

// Where adds a new predicate for the builder.
func (du *DatasourceUpdate) Where(ps ...predicate.Datasource) *DatasourceUpdate {
	du.predicates = append(du.predicates, ps...)
	return du
}

// SetName sets the name field.
func (du *DatasourceUpdate) SetName(s string) *DatasourceUpdate {
	du.mutation.SetName(s)
	return du
}

// SetType sets the type field.
func (du *DatasourceUpdate) SetType(st schema.DatasourceType) *DatasourceUpdate {
	du.mutation.ResetType()
	du.mutation.SetType(st)
	return du
}

// AddType adds st to type.
func (du *DatasourceUpdate) AddType(st schema.DatasourceType) *DatasourceUpdate {
	du.mutation.AddType(st)
	return du
}

// SetDetail sets the detail field.
func (du *DatasourceUpdate) SetDetail(sd schema.DatasourceDetail) *DatasourceUpdate {
	du.mutation.SetDetail(sd)
	return du
}

// SetUpdatedAt sets the updatedAt field.
func (du *DatasourceUpdate) SetUpdatedAt(t time.Time) *DatasourceUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// Mutation returns the DatasourceMutation object of the builder.
func (du *DatasourceUpdate) Mutation() *DatasourceMutation {
	return du.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (du *DatasourceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	du.defaults()
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DatasourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DatasourceUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DatasourceUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DatasourceUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DatasourceUpdate) defaults() {
	if _, ok := du.mutation.UpdatedAt(); !ok {
		v := datasource.UpdateDefaultUpdatedAt()
		du.mutation.SetUpdatedAt(v)
	}
}

func (du *DatasourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   datasource.Table,
			Columns: datasource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: datasource.FieldID,
			},
		},
	}
	if ps := du.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: datasource.FieldName,
		})
	}
	if value, ok := du.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: datasource.FieldType,
		})
	}
	if value, ok := du.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: datasource.FieldType,
		})
	}
	if value, ok := du.mutation.Detail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: datasource.FieldDetail,
		})
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: datasource.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{datasource.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DatasourceUpdateOne is the builder for updating a single Datasource entity.
type DatasourceUpdateOne struct {
	config
	hooks    []Hook
	mutation *DatasourceMutation
}

// SetName sets the name field.
func (duo *DatasourceUpdateOne) SetName(s string) *DatasourceUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetType sets the type field.
func (duo *DatasourceUpdateOne) SetType(st schema.DatasourceType) *DatasourceUpdateOne {
	duo.mutation.ResetType()
	duo.mutation.SetType(st)
	return duo
}

// AddType adds st to type.
func (duo *DatasourceUpdateOne) AddType(st schema.DatasourceType) *DatasourceUpdateOne {
	duo.mutation.AddType(st)
	return duo
}

// SetDetail sets the detail field.
func (duo *DatasourceUpdateOne) SetDetail(sd schema.DatasourceDetail) *DatasourceUpdateOne {
	duo.mutation.SetDetail(sd)
	return duo
}

// SetUpdatedAt sets the updatedAt field.
func (duo *DatasourceUpdateOne) SetUpdatedAt(t time.Time) *DatasourceUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// Mutation returns the DatasourceMutation object of the builder.
func (duo *DatasourceUpdateOne) Mutation() *DatasourceMutation {
	return duo.mutation
}

// Save executes the query and returns the updated entity.
func (duo *DatasourceUpdateOne) Save(ctx context.Context) (*Datasource, error) {
	var (
		err  error
		node *Datasource
	)
	duo.defaults()
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DatasourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DatasourceUpdateOne) SaveX(ctx context.Context) *Datasource {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DatasourceUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DatasourceUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DatasourceUpdateOne) defaults() {
	if _, ok := duo.mutation.UpdatedAt(); !ok {
		v := datasource.UpdateDefaultUpdatedAt()
		duo.mutation.SetUpdatedAt(v)
	}
}

func (duo *DatasourceUpdateOne) sqlSave(ctx context.Context) (_node *Datasource, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   datasource.Table,
			Columns: datasource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: datasource.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Datasource.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := duo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: datasource.FieldName,
		})
	}
	if value, ok := duo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: datasource.FieldType,
		})
	}
	if value, ok := duo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: datasource.FieldType,
		})
	}
	if value, ok := duo.mutation.Detail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: datasource.FieldDetail,
		})
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: datasource.FieldUpdatedAt,
		})
	}
	_node = &Datasource{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{datasource.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
