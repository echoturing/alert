// Code generated by entc, DO NOT EDIT.

package alerthistory

import (
	"time"

	"github.com/echoturing/alert/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id int64) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// AlertID applies equality check predicate on the "alert_id" field. It's identical to AlertIDEQ.
func AlertID(v int64) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlertID), v))
	})
}

// AlertName applies equality check predicate on the "alert_name" field. It's identical to AlertNameEQ.
func AlertName(v string) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlertName), v))
	})
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// AlertIDEQ applies the EQ predicate on the "alert_id" field.
func AlertIDEQ(v int64) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlertID), v))
	})
}

// AlertIDNEQ applies the NEQ predicate on the "alert_id" field.
func AlertIDNEQ(v int64) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAlertID), v))
	})
}

// AlertIDIn applies the In predicate on the "alert_id" field.
func AlertIDIn(vs ...int64) predicate.AlertHistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AlertHistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAlertID), v...))
	})
}

// AlertIDNotIn applies the NotIn predicate on the "alert_id" field.
func AlertIDNotIn(vs ...int64) predicate.AlertHistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AlertHistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAlertID), v...))
	})
}

// AlertIDGT applies the GT predicate on the "alert_id" field.
func AlertIDGT(v int64) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAlertID), v))
	})
}

// AlertIDGTE applies the GTE predicate on the "alert_id" field.
func AlertIDGTE(v int64) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAlertID), v))
	})
}

// AlertIDLT applies the LT predicate on the "alert_id" field.
func AlertIDLT(v int64) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAlertID), v))
	})
}

// AlertIDLTE applies the LTE predicate on the "alert_id" field.
func AlertIDLTE(v int64) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAlertID), v))
	})
}

// AlertNameEQ applies the EQ predicate on the "alert_name" field.
func AlertNameEQ(v string) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlertName), v))
	})
}

// AlertNameNEQ applies the NEQ predicate on the "alert_name" field.
func AlertNameNEQ(v string) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAlertName), v))
	})
}

// AlertNameIn applies the In predicate on the "alert_name" field.
func AlertNameIn(vs ...string) predicate.AlertHistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AlertHistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAlertName), v...))
	})
}

// AlertNameNotIn applies the NotIn predicate on the "alert_name" field.
func AlertNameNotIn(vs ...string) predicate.AlertHistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AlertHistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAlertName), v...))
	})
}

// AlertNameGT applies the GT predicate on the "alert_name" field.
func AlertNameGT(v string) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAlertName), v))
	})
}

// AlertNameGTE applies the GTE predicate on the "alert_name" field.
func AlertNameGTE(v string) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAlertName), v))
	})
}

// AlertNameLT applies the LT predicate on the "alert_name" field.
func AlertNameLT(v string) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAlertName), v))
	})
}

// AlertNameLTE applies the LTE predicate on the "alert_name" field.
func AlertNameLTE(v string) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAlertName), v))
	})
}

// AlertNameContains applies the Contains predicate on the "alert_name" field.
func AlertNameContains(v string) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAlertName), v))
	})
}

// AlertNameHasPrefix applies the HasPrefix predicate on the "alert_name" field.
func AlertNameHasPrefix(v string) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAlertName), v))
	})
}

// AlertNameHasSuffix applies the HasSuffix predicate on the "alert_name" field.
func AlertNameHasSuffix(v string) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAlertName), v))
	})
}

// AlertNameEqualFold applies the EqualFold predicate on the "alert_name" field.
func AlertNameEqualFold(v string) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAlertName), v))
	})
}

// AlertNameContainsFold applies the ContainsFold predicate on the "alert_name" field.
func AlertNameContainsFold(v string) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAlertName), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.AlertHistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AlertHistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AlertHistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AlertHistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIsNil applies the IsNil predicate on the "createdAt" field.
func CreatedAtIsNil() predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAt)))
	})
}

// CreatedAtNotNil applies the NotNil predicate on the "createdAt" field.
func CreatedAtNotNil() predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAt)))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.AlertHistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AlertHistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AlertHistory {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AlertHistory(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.AlertHistory) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.AlertHistory) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AlertHistory) predicate.AlertHistory {
	return predicate.AlertHistory(func(s *sql.Selector) {
		p(s.Not())
	})
}
