// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/echoturing/alert/ent/alert"
	"github.com/echoturing/alert/ent/channel"
	"github.com/echoturing/alert/ent/datasource"
	"github.com/echoturing/alert/ent/schema"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAlert      = "Alert"
	TypeChannel    = "Channel"
	TypeDatasource = "Datasource"
)

// AlertMutation represents an operation that mutate the Alerts
// nodes in the graph.
type AlertMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	name          *string
	channels      *schema.ChannelIDS
	rule          *schema.Rule
	status        *schema.AlertStatus
	addstatus     *schema.AlertStatus
	state         *schema.AlertState
	addstate      *schema.AlertState
	createdAt     *time.Time
	updatedAt     *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Alert, error)
}

var _ ent.Mutation = (*AlertMutation)(nil)

// alertOption allows to manage the mutation configuration using functional options.
type alertOption func(*AlertMutation)

// newAlertMutation creates new mutation for $n.Name.
func newAlertMutation(c config, op Op, opts ...alertOption) *AlertMutation {
	m := &AlertMutation{
		config:        c,
		op:            op,
		typ:           TypeAlert,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAlertID sets the id field of the mutation.
func withAlertID(id int64) alertOption {
	return func(m *AlertMutation) {
		var (
			err   error
			once  sync.Once
			value *Alert
		)
		m.oldValue = func(ctx context.Context) (*Alert, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Alert.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAlert sets the old Alert of the mutation.
func withAlert(node *Alert) alertOption {
	return func(m *AlertMutation) {
		m.oldValue = func(context.Context) (*Alert, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AlertMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AlertMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on Alert creation.
func (m *AlertMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *AlertMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *AlertMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *AlertMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Alert.
// If the Alert object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AlertMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *AlertMutation) ResetName() {
	m.name = nil
}

// SetChannels sets the channels field.
func (m *AlertMutation) SetChannels(si schema.ChannelIDS) {
	m.channels = &si
}

// Channels returns the channels value in the mutation.
func (m *AlertMutation) Channels() (r schema.ChannelIDS, exists bool) {
	v := m.channels
	if v == nil {
		return
	}
	return *v, true
}

// OldChannels returns the old channels value of the Alert.
// If the Alert object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AlertMutation) OldChannels(ctx context.Context) (v schema.ChannelIDS, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldChannels is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldChannels requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChannels: %w", err)
	}
	return oldValue.Channels, nil
}

// ResetChannels reset all changes of the "channels" field.
func (m *AlertMutation) ResetChannels() {
	m.channels = nil
}

// SetRule sets the rule field.
func (m *AlertMutation) SetRule(s schema.Rule) {
	m.rule = &s
}

// Rule returns the rule value in the mutation.
func (m *AlertMutation) Rule() (r schema.Rule, exists bool) {
	v := m.rule
	if v == nil {
		return
	}
	return *v, true
}

// OldRule returns the old rule value of the Alert.
// If the Alert object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AlertMutation) OldRule(ctx context.Context) (v schema.Rule, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRule is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRule requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRule: %w", err)
	}
	return oldValue.Rule, nil
}

// ResetRule reset all changes of the "rule" field.
func (m *AlertMutation) ResetRule() {
	m.rule = nil
}

// SetStatus sets the status field.
func (m *AlertMutation) SetStatus(ss schema.AlertStatus) {
	m.status = &ss
	m.addstatus = nil
}

// Status returns the status value in the mutation.
func (m *AlertMutation) Status() (r schema.AlertStatus, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old status value of the Alert.
// If the Alert object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AlertMutation) OldStatus(ctx context.Context) (v schema.AlertStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds ss to status.
func (m *AlertMutation) AddStatus(ss schema.AlertStatus) {
	if m.addstatus != nil {
		*m.addstatus += ss
	} else {
		m.addstatus = &ss
	}
}

// AddedStatus returns the value that was added to the status field in this mutation.
func (m *AlertMutation) AddedStatus() (r schema.AlertStatus, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus reset all changes of the "status" field.
func (m *AlertMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetState sets the state field.
func (m *AlertMutation) SetState(ss schema.AlertState) {
	m.state = &ss
	m.addstate = nil
}

// State returns the state value in the mutation.
func (m *AlertMutation) State() (r schema.AlertState, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old state value of the Alert.
// If the Alert object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AlertMutation) OldState(ctx context.Context) (v schema.AlertState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldState is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// AddState adds ss to state.
func (m *AlertMutation) AddState(ss schema.AlertState) {
	if m.addstate != nil {
		*m.addstate += ss
	} else {
		m.addstate = &ss
	}
}

// AddedState returns the value that was added to the state field in this mutation.
func (m *AlertMutation) AddedState() (r schema.AlertState, exists bool) {
	v := m.addstate
	if v == nil {
		return
	}
	return *v, true
}

// ResetState reset all changes of the "state" field.
func (m *AlertMutation) ResetState() {
	m.state = nil
	m.addstate = nil
}

// SetCreatedAt sets the createdAt field.
func (m *AlertMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the createdAt value in the mutation.
func (m *AlertMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old createdAt value of the Alert.
// If the Alert object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AlertMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt reset all changes of the "createdAt" field.
func (m *AlertMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the updatedAt field.
func (m *AlertMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the updatedAt value in the mutation.
func (m *AlertMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old updatedAt value of the Alert.
// If the Alert object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AlertMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt reset all changes of the "updatedAt" field.
func (m *AlertMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// Op returns the operation name.
func (m *AlertMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Alert).
func (m *AlertMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *AlertMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.name != nil {
		fields = append(fields, alert.FieldName)
	}
	if m.channels != nil {
		fields = append(fields, alert.FieldChannels)
	}
	if m.rule != nil {
		fields = append(fields, alert.FieldRule)
	}
	if m.status != nil {
		fields = append(fields, alert.FieldStatus)
	}
	if m.state != nil {
		fields = append(fields, alert.FieldState)
	}
	if m.createdAt != nil {
		fields = append(fields, alert.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, alert.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *AlertMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case alert.FieldName:
		return m.Name()
	case alert.FieldChannels:
		return m.Channels()
	case alert.FieldRule:
		return m.Rule()
	case alert.FieldStatus:
		return m.Status()
	case alert.FieldState:
		return m.State()
	case alert.FieldCreatedAt:
		return m.CreatedAt()
	case alert.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *AlertMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case alert.FieldName:
		return m.OldName(ctx)
	case alert.FieldChannels:
		return m.OldChannels(ctx)
	case alert.FieldRule:
		return m.OldRule(ctx)
	case alert.FieldStatus:
		return m.OldStatus(ctx)
	case alert.FieldState:
		return m.OldState(ctx)
	case alert.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case alert.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Alert field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *AlertMutation) SetField(name string, value ent.Value) error {
	switch name {
	case alert.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case alert.FieldChannels:
		v, ok := value.(schema.ChannelIDS)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChannels(v)
		return nil
	case alert.FieldRule:
		v, ok := value.(schema.Rule)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRule(v)
		return nil
	case alert.FieldStatus:
		v, ok := value.(schema.AlertStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case alert.FieldState:
		v, ok := value.(schema.AlertState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case alert.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case alert.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Alert field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *AlertMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, alert.FieldStatus)
	}
	if m.addstate != nil {
		fields = append(fields, alert.FieldState)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *AlertMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case alert.FieldStatus:
		return m.AddedStatus()
	case alert.FieldState:
		return m.AddedState()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *AlertMutation) AddField(name string, value ent.Value) error {
	switch name {
	case alert.FieldStatus:
		v, ok := value.(schema.AlertStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case alert.FieldState:
		v, ok := value.(schema.AlertState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddState(v)
		return nil
	}
	return fmt.Errorf("unknown Alert numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *AlertMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *AlertMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *AlertMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Alert nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *AlertMutation) ResetField(name string) error {
	switch name {
	case alert.FieldName:
		m.ResetName()
		return nil
	case alert.FieldChannels:
		m.ResetChannels()
		return nil
	case alert.FieldRule:
		m.ResetRule()
		return nil
	case alert.FieldStatus:
		m.ResetStatus()
		return nil
	case alert.FieldState:
		m.ResetState()
		return nil
	case alert.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case alert.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Alert field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *AlertMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *AlertMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *AlertMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *AlertMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *AlertMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *AlertMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *AlertMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Alert unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *AlertMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Alert edge %s", name)
}

// ChannelMutation represents an operation that mutate the Channels
// nodes in the graph.
type ChannelMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	name          *string
	_type         *schema.ChannelType
	add_type      *schema.ChannelType
	detail        *schema.ChannelDetail
	createdAt     *time.Time
	updatedAt     *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Channel, error)
}

var _ ent.Mutation = (*ChannelMutation)(nil)

// channelOption allows to manage the mutation configuration using functional options.
type channelOption func(*ChannelMutation)

// newChannelMutation creates new mutation for $n.Name.
func newChannelMutation(c config, op Op, opts ...channelOption) *ChannelMutation {
	m := &ChannelMutation{
		config:        c,
		op:            op,
		typ:           TypeChannel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChannelID sets the id field of the mutation.
func withChannelID(id int64) channelOption {
	return func(m *ChannelMutation) {
		var (
			err   error
			once  sync.Once
			value *Channel
		)
		m.oldValue = func(ctx context.Context) (*Channel, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Channel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChannel sets the old Channel of the mutation.
func withChannel(node *Channel) channelOption {
	return func(m *ChannelMutation) {
		m.oldValue = func(context.Context) (*Channel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChannelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChannelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on Channel creation.
func (m *ChannelMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ChannelMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *ChannelMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *ChannelMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Channel.
// If the Channel object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ChannelMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *ChannelMutation) ResetName() {
	m.name = nil
}

// SetType sets the type field.
func (m *ChannelMutation) SetType(st schema.ChannelType) {
	m._type = &st
	m.add_type = nil
}

// GetType returns the type value in the mutation.
func (m *ChannelMutation) GetType() (r schema.ChannelType, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old type value of the Channel.
// If the Channel object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ChannelMutation) OldType(ctx context.Context) (v schema.ChannelType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds st to type.
func (m *ChannelMutation) AddType(st schema.ChannelType) {
	if m.add_type != nil {
		*m.add_type += st
	} else {
		m.add_type = &st
	}
}

// AddedType returns the value that was added to the type field in this mutation.
func (m *ChannelMutation) AddedType() (r schema.ChannelType, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetType reset all changes of the "type" field.
func (m *ChannelMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// SetDetail sets the detail field.
func (m *ChannelMutation) SetDetail(sd schema.ChannelDetail) {
	m.detail = &sd
}

// Detail returns the detail value in the mutation.
func (m *ChannelMutation) Detail() (r schema.ChannelDetail, exists bool) {
	v := m.detail
	if v == nil {
		return
	}
	return *v, true
}

// OldDetail returns the old detail value of the Channel.
// If the Channel object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ChannelMutation) OldDetail(ctx context.Context) (v schema.ChannelDetail, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDetail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDetail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDetail: %w", err)
	}
	return oldValue.Detail, nil
}

// ResetDetail reset all changes of the "detail" field.
func (m *ChannelMutation) ResetDetail() {
	m.detail = nil
}

// SetCreatedAt sets the createdAt field.
func (m *ChannelMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the createdAt value in the mutation.
func (m *ChannelMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old createdAt value of the Channel.
// If the Channel object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ChannelMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt reset all changes of the "createdAt" field.
func (m *ChannelMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the updatedAt field.
func (m *ChannelMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the updatedAt value in the mutation.
func (m *ChannelMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old updatedAt value of the Channel.
// If the Channel object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ChannelMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt reset all changes of the "updatedAt" field.
func (m *ChannelMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// Op returns the operation name.
func (m *ChannelMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Channel).
func (m *ChannelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ChannelMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, channel.FieldName)
	}
	if m._type != nil {
		fields = append(fields, channel.FieldType)
	}
	if m.detail != nil {
		fields = append(fields, channel.FieldDetail)
	}
	if m.createdAt != nil {
		fields = append(fields, channel.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, channel.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ChannelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case channel.FieldName:
		return m.Name()
	case channel.FieldType:
		return m.GetType()
	case channel.FieldDetail:
		return m.Detail()
	case channel.FieldCreatedAt:
		return m.CreatedAt()
	case channel.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ChannelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case channel.FieldName:
		return m.OldName(ctx)
	case channel.FieldType:
		return m.OldType(ctx)
	case channel.FieldDetail:
		return m.OldDetail(ctx)
	case channel.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case channel.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Channel field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ChannelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case channel.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case channel.FieldType:
		v, ok := value.(schema.ChannelType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case channel.FieldDetail:
		v, ok := value.(schema.ChannelDetail)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDetail(v)
		return nil
	case channel.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case channel.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Channel field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ChannelMutation) AddedFields() []string {
	var fields []string
	if m.add_type != nil {
		fields = append(fields, channel.FieldType)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ChannelMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case channel.FieldType:
		return m.AddedType()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ChannelMutation) AddField(name string, value ent.Value) error {
	switch name {
	case channel.FieldType:
		v, ok := value.(schema.ChannelType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	}
	return fmt.Errorf("unknown Channel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ChannelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ChannelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChannelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Channel nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ChannelMutation) ResetField(name string) error {
	switch name {
	case channel.FieldName:
		m.ResetName()
		return nil
	case channel.FieldType:
		m.ResetType()
		return nil
	case channel.FieldDetail:
		m.ResetDetail()
		return nil
	case channel.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case channel.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Channel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ChannelMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ChannelMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ChannelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ChannelMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ChannelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ChannelMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ChannelMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Channel unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ChannelMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Channel edge %s", name)
}

// DatasourceMutation represents an operation that mutate the Datasources
// nodes in the graph.
type DatasourceMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	name          *string
	_type         *schema.DatasourceType
	add_type      *schema.DatasourceType
	detail        *schema.DatasourceDetail
	createdAt     *time.Time
	updatedAt     *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Datasource, error)
}

var _ ent.Mutation = (*DatasourceMutation)(nil)

// datasourceOption allows to manage the mutation configuration using functional options.
type datasourceOption func(*DatasourceMutation)

// newDatasourceMutation creates new mutation for $n.Name.
func newDatasourceMutation(c config, op Op, opts ...datasourceOption) *DatasourceMutation {
	m := &DatasourceMutation{
		config:        c,
		op:            op,
		typ:           TypeDatasource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDatasourceID sets the id field of the mutation.
func withDatasourceID(id int64) datasourceOption {
	return func(m *DatasourceMutation) {
		var (
			err   error
			once  sync.Once
			value *Datasource
		)
		m.oldValue = func(ctx context.Context) (*Datasource, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Datasource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDatasource sets the old Datasource of the mutation.
func withDatasource(node *Datasource) datasourceOption {
	return func(m *DatasourceMutation) {
		m.oldValue = func(context.Context) (*Datasource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DatasourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DatasourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on Datasource creation.
func (m *DatasourceMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DatasourceMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *DatasourceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *DatasourceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Datasource.
// If the Datasource object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DatasourceMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *DatasourceMutation) ResetName() {
	m.name = nil
}

// SetType sets the type field.
func (m *DatasourceMutation) SetType(st schema.DatasourceType) {
	m._type = &st
	m.add_type = nil
}

// GetType returns the type value in the mutation.
func (m *DatasourceMutation) GetType() (r schema.DatasourceType, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old type value of the Datasource.
// If the Datasource object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DatasourceMutation) OldType(ctx context.Context) (v schema.DatasourceType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds st to type.
func (m *DatasourceMutation) AddType(st schema.DatasourceType) {
	if m.add_type != nil {
		*m.add_type += st
	} else {
		m.add_type = &st
	}
}

// AddedType returns the value that was added to the type field in this mutation.
func (m *DatasourceMutation) AddedType() (r schema.DatasourceType, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetType reset all changes of the "type" field.
func (m *DatasourceMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// SetDetail sets the detail field.
func (m *DatasourceMutation) SetDetail(sd schema.DatasourceDetail) {
	m.detail = &sd
}

// Detail returns the detail value in the mutation.
func (m *DatasourceMutation) Detail() (r schema.DatasourceDetail, exists bool) {
	v := m.detail
	if v == nil {
		return
	}
	return *v, true
}

// OldDetail returns the old detail value of the Datasource.
// If the Datasource object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DatasourceMutation) OldDetail(ctx context.Context) (v schema.DatasourceDetail, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDetail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDetail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDetail: %w", err)
	}
	return oldValue.Detail, nil
}

// ResetDetail reset all changes of the "detail" field.
func (m *DatasourceMutation) ResetDetail() {
	m.detail = nil
}

// SetCreatedAt sets the createdAt field.
func (m *DatasourceMutation) SetCreatedAt(t time.Time) {
	m.createdAt = &t
}

// CreatedAt returns the createdAt value in the mutation.
func (m *DatasourceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.createdAt
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old createdAt value of the Datasource.
// If the Datasource object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DatasourceMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt reset all changes of the "createdAt" field.
func (m *DatasourceMutation) ResetCreatedAt() {
	m.createdAt = nil
}

// SetUpdatedAt sets the updatedAt field.
func (m *DatasourceMutation) SetUpdatedAt(t time.Time) {
	m.updatedAt = &t
}

// UpdatedAt returns the updatedAt value in the mutation.
func (m *DatasourceMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updatedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old updatedAt value of the Datasource.
// If the Datasource object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DatasourceMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt reset all changes of the "updatedAt" field.
func (m *DatasourceMutation) ResetUpdatedAt() {
	m.updatedAt = nil
}

// Op returns the operation name.
func (m *DatasourceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Datasource).
func (m *DatasourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DatasourceMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, datasource.FieldName)
	}
	if m._type != nil {
		fields = append(fields, datasource.FieldType)
	}
	if m.detail != nil {
		fields = append(fields, datasource.FieldDetail)
	}
	if m.createdAt != nil {
		fields = append(fields, datasource.FieldCreatedAt)
	}
	if m.updatedAt != nil {
		fields = append(fields, datasource.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DatasourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case datasource.FieldName:
		return m.Name()
	case datasource.FieldType:
		return m.GetType()
	case datasource.FieldDetail:
		return m.Detail()
	case datasource.FieldCreatedAt:
		return m.CreatedAt()
	case datasource.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DatasourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case datasource.FieldName:
		return m.OldName(ctx)
	case datasource.FieldType:
		return m.OldType(ctx)
	case datasource.FieldDetail:
		return m.OldDetail(ctx)
	case datasource.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case datasource.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Datasource field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DatasourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case datasource.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case datasource.FieldType:
		v, ok := value.(schema.DatasourceType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case datasource.FieldDetail:
		v, ok := value.(schema.DatasourceDetail)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDetail(v)
		return nil
	case datasource.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case datasource.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Datasource field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DatasourceMutation) AddedFields() []string {
	var fields []string
	if m.add_type != nil {
		fields = append(fields, datasource.FieldType)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DatasourceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case datasource.FieldType:
		return m.AddedType()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DatasourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case datasource.FieldType:
		v, ok := value.(schema.DatasourceType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	}
	return fmt.Errorf("unknown Datasource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DatasourceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DatasourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DatasourceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Datasource nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DatasourceMutation) ResetField(name string) error {
	switch name {
	case datasource.FieldName:
		m.ResetName()
		return nil
	case datasource.FieldType:
		m.ResetType()
		return nil
	case datasource.FieldDetail:
		m.ResetDetail()
		return nil
	case datasource.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case datasource.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Datasource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DatasourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DatasourceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DatasourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DatasourceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DatasourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DatasourceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DatasourceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Datasource unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DatasourceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Datasource edge %s", name)
}
