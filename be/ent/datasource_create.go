// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/echoturing/alert/ent/datasource"
	"github.com/echoturing/alert/ent/schema"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// DatasourceCreate is the builder for creating a Datasource entity.
type DatasourceCreate struct {
	config
	mutation *DatasourceMutation
	hooks    []Hook
}

// SetName sets the name field.
func (dc *DatasourceCreate) SetName(s string) *DatasourceCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetType sets the type field.
func (dc *DatasourceCreate) SetType(st schema.DatasourceType) *DatasourceCreate {
	dc.mutation.SetType(st)
	return dc
}

// SetDetail sets the detail field.
func (dc *DatasourceCreate) SetDetail(sd schema.DatasourceDetail) *DatasourceCreate {
	dc.mutation.SetDetail(sd)
	return dc
}

// SetCreatedAt sets the createdAt field.
func (dc *DatasourceCreate) SetCreatedAt(t time.Time) *DatasourceCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the createdAt field if the given value is not nil.
func (dc *DatasourceCreate) SetNillableCreatedAt(t *time.Time) *DatasourceCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetUpdatedAt sets the updatedAt field.
func (dc *DatasourceCreate) SetUpdatedAt(t time.Time) *DatasourceCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetID sets the id field.
func (dc *DatasourceCreate) SetID(i int64) *DatasourceCreate {
	dc.mutation.SetID(i)
	return dc
}

// Mutation returns the DatasourceMutation object of the builder.
func (dc *DatasourceCreate) Mutation() *DatasourceMutation {
	return dc.mutation
}

// Save creates the Datasource in the database.
func (dc *DatasourceCreate) Save(ctx context.Context) (*Datasource, error) {
	var (
		err  error
		node *Datasource
	)
	dc.defaults()
	if len(dc.hooks) == 0 {
		if err = dc.check(); err != nil {
			return nil, err
		}
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DatasourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dc.check(); err != nil {
				return nil, err
			}
			dc.mutation = mutation
			node, err = dc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DatasourceCreate) SaveX(ctx context.Context) *Datasource {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (dc *DatasourceCreate) defaults() {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := datasource.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DatasourceCreate) check() error {
	if _, ok := dc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := dc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if _, ok := dc.mutation.Detail(); !ok {
		return &ValidationError{Name: "detail", err: errors.New("ent: missing required field \"detail\"")}
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New("ent: missing required field \"createdAt\"")}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New("ent: missing required field \"updatedAt\"")}
	}
	return nil
}

func (dc *DatasourceCreate) sqlSave(ctx context.Context) (*Datasource, error) {
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (dc *DatasourceCreate) createSpec() (*Datasource, *sqlgraph.CreateSpec) {
	var (
		_node = &Datasource{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: datasource.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: datasource.FieldID,
			},
		}
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: datasource.FieldName,
		})
		_node.Name = value
	}
	if value, ok := dc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: datasource.FieldType,
		})
		_node.Type = value
	}
	if value, ok := dc.mutation.Detail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: datasource.FieldDetail,
		})
		_node.Detail = value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: datasource.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: datasource.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// DatasourceCreateBulk is the builder for creating a bulk of Datasource entities.
type DatasourceCreateBulk struct {
	config
	builders []*DatasourceCreate
}

// Save creates the Datasource entities in the database.
func (dcb *DatasourceCreateBulk) Save(ctx context.Context) ([]*Datasource, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Datasource, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DatasourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (dcb *DatasourceCreateBulk) SaveX(ctx context.Context) []*Datasource {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
